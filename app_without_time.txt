from flask import Flask, render_template, request, send_file, flash, redirect, url_for
import matplotlib
matplotlib.use("Agg")  # Headless-Backend für Matplotlib
import matplotlib.pyplot as plt
import os

app = Flask(__name__)
app.secret_key = "geheimes_schluesselwort"

# Datei für die Speicherung der Temperaturen
DATA_FILE = "temperatures.txt"

def save_temperatures(data):
    """Speichert die Temperaturen in einer Datei."""
    print(f"[save_temperatures] Speichere in Datei: {data}")
    with open(DATA_FILE, "w") as file:
        for temp in data:
            file.write(f"{temp}\n")
    with open(DATA_FILE, "r") as file:  # Direkt danach lesen und prüfen
        content = file.readlines()
        print(f"[save_temperatures] Datei-Inhalt nach Speichern: {content}")

def load_temperatures():
    """Lädt die Temperaturen aus einer Datei."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            data = [float(line.strip()) for line in file]
            print(f"[load_temperatures] Geladene Daten aus Datei: {data}")
            return data
    print("[load_temperatures] Keine Datei gefunden, leere Liste zurückgegeben.")
    return []

def read_file():
    """Debug-Funktion: Liest den aktuellen Inhalt der Datei."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            return file.read().strip().split("\n")
    return []

@app.route("/", methods=["GET", "POST"])
def home():
    global temperatures
    temperatures = load_temperatures()  # Datei immer neu laden
    print(f"[home] Nach Laden der Datei: {temperatures}")  # Debugging

    if request.method == "POST":
        temp = request.form.get("temperature")
        print(f"[home] Eingabe erhalten (nach Löschen?): {temp}")  # Zusätzliche Debug-Ausgabe
        if temp:
            try:
                temp = float(temp)
                if 35 <= temp <= 43:
                    temperatures.append(temp)
                    save_temperatures(temperatures)
                    create_chart(temperatures)
                    print(f"[home] Nach Hinzufügen (nach Löschen?): {temperatures}")  # Debugging
                else:
                    flash(f"Ungültiger Wert: {temp}°C. Bitte nur Werte zwischen 35 und 43 eingeben.")
            except ValueError:
                flash("Ungültige Eingabe. Bitte eine Zahl eingeben.")

    return render_template("index.html", temperatures=temperatures)


@app.route("/clear", methods=["POST"])
def clear_data():
    """Löscht alle gespeicherten Temperaturen."""
    global temperatures
    print(f"[clear_data] Vor dem Löschen: {temperatures}")
    temperatures = []  # Liste zurücksetzen
    save_temperatures(temperatures)  # Datei leeren
    print(f"[clear_data] Nach dem Löschen: {temperatures}")
    flash("Alle Temperaturen wurden erfolgreich gelöscht.")
    # Nach dem Löschen auf die Hauptseite umleiten
    return redirect(url_for("home"))

def create_chart(data):
    """Erstellt ein Fieberkurven-Diagramm."""
    plt.figure(figsize=(8, 4))
    plt.plot(data, marker="o", color="red", linestyle="-")
    plt.title("Fieberkurve")
    plt.xlabel("Messung")
    plt.ylabel("Temperatur (°C)")

    # Berechne den y-Achsenbereich dynamisch mit etwas Puffer
    min_temp = min(data) if data else 35
    max_temp = max(data) if data else 42
    plt.ylim(min_temp - 1, max_temp + 1)  # Puffer von 1 Grad nach oben und unten

    plt.grid(True)

    # Speicher das Diagramm
    chart_path = os.path.join("static", "chart.png")
    os.makedirs("static", exist_ok=True)
    plt.savefig(chart_path)
    plt.close()


@app.route("/chart")
def get_chart():
    """Sendet das Diagramm an den Browser."""
    return send_file(os.path.join("static", "chart.png"), mimetype="image/png")

# Initialisierung der globalen Liste beim Start
temperatures = load_temperatures()

if __name__ == "__main__":
    app.run(debug=True, port=8080)
